buildscript {
    repositories {
        gradlePluginPortal()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()

    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'

}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = project.mod_version + "+1.19.x+forge"


java {
    archivesBaseName = 'ChatImage'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}
configurations {
    compileClasspath.extendsFrom(shadow)
    runtimeClasspath.extendsFrom(shadow)
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'chatimage'

            mods {
                chatimage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'chatimage'

            mods {
                chatimage {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'chatimage'

            mods {
                chatimage {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'chatimage', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                chatimage {
                    source sourceSets.main
                }
            }
        }
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:

}
mixin {
    add sourceSets.main, "chatimage.refmap.json"

    config "chatimage.mixins.json"
}

// Workaround for SpongePowered/MixinGradle#38


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
dependencies {
    minecraft("net.minecraftforge:forge:${minecraftforge_version}")

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency


    shadow(implementation "io.github.kituin:ChatImageCode:${project.code_version}")

    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')
}
shadowJar {

    configurations = [project.configurations.shadow]
    archiveClassifier.set('')
    dependencies {
        include(dependency("io.github.kituin:ChatImageCode:${project.code_version}"))
    }

    destinationDirectory = file("./../ChatImage-jar/${project.mod_version}")
    relocate "net.sf.image4j", "chatimage.net.sf.image4j"
}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "chatimage",
                "Implementation-Vendor"   : "kitUIN",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}
reobf {
    shadowJar {}

}

tasks.build.dependsOn shadowJar
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')